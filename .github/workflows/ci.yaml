name: Java CI with Gradle and Docker

# 1. 워크플로우 트리거 조건
on:
  push:
    branches: [ "main" ] # main 브랜치에 푸시될 때 실행

jobs:
  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest # 실행 환경

    steps:
      # 2. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 3. JDK 설정 (Dockerfile 내에서 빌드하므로 GitHub Actions 레벨에서는 선택 사항)
      # - name: Set up JDK 17
      #   uses: actions/setup-java@v4
      #   with:
      #     java-version: '17'
      #     distribution: 'temurin'
      # - name: Grant execute permission for gradlew
      #   run: chmod +x gradlew
      # - name: Build with Gradle (for testing before Docker build, optional)
      #   run: ./gradlew build -x test

      # 4. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Docker 이미지에 사용할 메타데이터 설정 (태그 등)
      - name: Extract metadata (tags, labels) for Docker
        id: meta # 이 스텝의 출력을 참조하기 위한 ID
        uses: docker/metadata-action@v5
        with:
          images: msj9965/alog-user # Docker Hub 이미지 이름
          # 'main' 태그를 명시적으로 생성하고 싶다면 (그리고 latest도 함께)
          tags: |
            type=raw,value=main,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-,format=short 

      # 6. Docker 이미지 빌드 및 푸시 (기존 Dockerfile 사용)
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        # id: docker_build # 이 id는 현재 Jenkins 트리거 스텝에서 직접 사용되지 않음
        with:
          context: . # Dockerfile이 있는 현재 디렉토리
          file: ./Dockerfile # Dockerfile 경로
          push: true # true로 설정해야 이미지를 푸시합니다.
          tags: ${{ steps.meta.outputs.tags }} # 위에서 생성된 태그 사용 (예: main, latest, sha-xxxxxxx)
          labels: ${{ steps.meta.outputs.labels }} # 위에서 생성된 레이블 사용

      # 7. Jenkins CD 파이프라인 트리거 (이미지 푸시 성공 후)
      # 이 스텝은 이전 스텝들과 동일한 들여쓰기 레벨에 있어야 합니다.
      - name: Trigger Jenkins CD Pipeline
        if: success() # 이전 'Build and push' 스텝이 성공했을 때만 실행
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }} # Jenkins URL (GitHub Secret으로 관리)
          JENKINS_JOB_NAME: ${{ secrets.JENKINS_JOB_NAME }} # Jenkins 작업 이름 (GitHub Secret으로 관리)
          JENKINS_TRIGGER_TOKEN: ${{ secrets.JENKINS_TRIGGER_TOKEN }} # Jenkins 작업에 설정한 인증 토큰 (GitHub Secret으로 관리)
          # Jenkins에 전달할 이미지 태그를 'main'으로 고정
          IMAGE_TO_DEPLOY_TAG: main
        run: |
          echo "Triggering Jenkins job: ${JENKINS_JOB_NAME} with tag: ${IMAGE_TO_DEPLOY_TAG}"
          curl -X POST "${JENKINS_URL}/job/${JENKINS_JOB_NAME}/buildWithParameters?token=${JENKINS_TRIGGER_TOKEN}&IMAGE_TAG=${IMAGE_TO_DEPLOY_TAG}"

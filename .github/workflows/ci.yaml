name: Java CI with Gradle and Docker

# 1. 워크플로우 트리거 조건
on:
  push:
    branches: [ "main" ] # main 브랜치에 푸시될 때 실행

jobs:
  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest # 실행 환경

    steps:
      # 2. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 3. JDK 설정 (선택 사항)
      # - name: Set up JDK 17
      #   # ...

      # 4. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Docker 이미지 메타데이터 설정 (태그 등)
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: msj9965/alog-user # Docker Hub 이미지 이름
          # 태그 전략: main 브랜치에서 main, latest, sha-short 태그 생성
          tags: |
            type=raw,value=main,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-,format=short 

      # 6. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }} # 위에서 생성된 태그 사용
          labels: ${{ steps.meta.outputs.labels }}

      # 7. Jenkins CD 파이프라인 트리거
      - name: Trigger Jenkins CD Pipeline
        if: success() # 이전 스텝이 성공했을 때만 실행
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}
          JENKINS_JOB_NAME: ${{ secrets.JENKINS_JOB_NAME }}
          JENKINS_TRIGGER_TOKEN: ${{ secrets.JENKINS_TRIGGER_TOKEN }} # Jenkins 작업의 원격 빌드 토큰
          IMAGE_TO_DEPLOY_TAG: main # Jenkins에 전달할 이미지 태그 (현재 'main'으로 고정)
          JENKINS_USER_ID: ${{ secrets.JENKINS_USER_ID }} # Jenkins 사용자 ID (API 토큰 발급자)
          JENKINS_USER_API_TOKEN: ${{ secrets.JENKINS_USER_API_TOKEN }} # Jenkins 사용자 API 토큰
        run: |
          echo "Triggering Jenkins job: ${JENKINS_JOB_NAME} with tag: ${IMAGE_TO_DEPLOY_TAG}"
          # Jenkins API 토큰으로 인증 (-u 옵션)
          # /buildWithParameters 엔드포인트 사용
          # URL 파라미터로 원격 빌드 토큰 (token=)과 이미지 태그 (IMAGE_TAG=) 전달
          curl -X POST -u "${JENKINS_USER_ID}:${JENKINS_USER_API_TOKEN}" \
            "${JENKINS_URL}/job/${JENKINS_JOB_NAME}/buildWithParameters?token=${JENKINS_TRIGGER_TOKEN}&IMAGE_TAG=${IMAGE_TO_DEPLOY_TAG}"

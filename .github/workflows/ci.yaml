name: Java CI with Gradle and Docker

# 1. 워크플로우 트리거 조건
on:
  push:
    branches: [ "main" ] # main 브랜치에 푸시될 때 실행
  # pull_request: # 필요하다면 PR 시에도 실행 (이미지 푸시는 main 브랜치에서만)
  #   branches: [ "main" ]

jobs:
  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest # 실행 환경

    steps:
      # 2. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 3. JDK 설정 (Dockerfile 내에서 빌드하므로 GitHub Actions 레벨에서는 선택 사항)
      # 만약 GitHub Actions에서 테스트 등을 실행한다면 필요합니다.
      # Dockerfile이 모든 빌드를 처리하므로 이 부분은 생략 가능합니다.
      # - name: Set up JDK 17
      #   uses: actions/setup-java@v4
      #   with:
      #     java-version: '17'
      #     distribution: 'temurin'

      # - name: Grant execute permission for gradlew
      #   run: chmod +x gradlew
      # - name: Build with Gradle (for testing before Docker build, optional)
      #   run: ./gradlew build -x test

      # 4. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Docker 이미지에 사용할 메타데이터 설정 (태그 등)
      - name: Extract metadata (tags, labels) for Docker
        id: meta # 이 스텝의 출력을 참조하기 위한 ID
        uses: docker/metadata-action@v5
        with:
          images: msj9965/alog-user # Docker Hub 이미지 이름

      # 6. Docker 이미지 빌드 및 푸시 (기존 Dockerfile 사용)
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile이 있는 현재 디렉토리
          file: ./Dockerfile # Dockerfile 경로
          push: true # true로 설정해야 이미지를 푸시합니다.
          tags: ${{ steps.meta.outputs.tags }} # 위에서 생성된 태그 사용 (예: latest, commit-sha)
          labels: ${{ steps.meta.outputs.labels }} # 위에서 생성된 레이블 사용